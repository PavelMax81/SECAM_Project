__kernel void kernel_A(__global const int   *init_grain_indices, __global const char  *en_types,
                       __global const char  *grain_rec_types,    __global const float *temperatures,
                       __global const float *low_tempr_recryst,  __global const float *high_tempr_recryst,
                       __global const float *low_tempr_twinning, __global const float *high_tempr_twinning,
                       __global const float *max_prob_recryst,   __global const float *max_prob_twinning,
                       __global const int   *neighbours1S_0,     __global const int   *neighbours1S_1,
                       __global const int   *neighbours1S_2,     __global const int   *neighbours1S_3,
                       __global const int   *neighbours1S_4,     __global const int   *neighbours1S_5,
                       __global const int   *neighbours1S_6,     __global const int   *neighbours1S_7,
                       __global const int   *neighbours1S_8,     __global const int   *neighbours1S_9,
                       __global const int   *neighbours1S_10,    __global const int   *neighbours1S_11,
                       __global const float *random,             __global       float *prob_new_grain,
                       __global       float *prob_twinning,      __global       char  *new_grain_embryos,
                       __global       char  *twin_grain_embryos, __global       int   *root_grain_indices)
{   
    int cell_index         = get_global_id(0);
    int old_grain_index    = init_grain_indices[cell_index] - 1;
    char old_grain_rec_type = grain_rec_types[old_grain_index];
    
    float low_tempr  = low_tempr_recryst[old_grain_index]; 
    float high_tempr = high_tempr_recryst[old_grain_index];
    
    float aver_tempr_recryst = high_tempr_recryst[old_grain_index] + (float)1.0; // (float)0.5*(low_tempr + high_tempr); //  
    
    // Probability of generation of new grain in current cell
    prob_new_grain[cell_index] = max_prob_recryst[old_grain_index]*(float)signbit(fabs(en_types[cell_index] - (float)1) - (float)0.5)* // signbit(fabs(old_grain_rec_type - (float)0) - (float)0.5)*
         (float)signbit(low_tempr - temperatures[cell_index])*(float)signbit(temperatures[cell_index] - high_tempr)*
        ((float)signbit(temperatures[cell_index] - aver_tempr_recryst)*(temperatures[cell_index] - low_tempr)/(aver_tempr_recryst - low_tempr) + 
         (float)signbit(aver_tempr_recryst - temperatures[cell_index])*(high_tempr - temperatures[cell_index])/(high_tempr - aver_tempr_recryst))*
         (float)signbit(fabs(grain_rec_types[init_grain_indices[neighbours1S_0 [cell_index]] - 1] - (float)0) + 
                        fabs(grain_rec_types[init_grain_indices[neighbours1S_1 [cell_index]] - 1] - (float)0) +
                        fabs(grain_rec_types[init_grain_indices[neighbours1S_2 [cell_index]] - 1] - (float)0) +
                        fabs(grain_rec_types[init_grain_indices[neighbours1S_3 [cell_index]] - 1] - (float)0) +
                        fabs(grain_rec_types[init_grain_indices[neighbours1S_4 [cell_index]] - 1] - (float)0) +
                        fabs(grain_rec_types[init_grain_indices[neighbours1S_5 [cell_index]] - 1] - (float)0) +
                        fabs(grain_rec_types[init_grain_indices[neighbours1S_6 [cell_index]] - 1] - (float)0) +
                        fabs(grain_rec_types[init_grain_indices[neighbours1S_7 [cell_index]] - 1] - (float)0) +
                        fabs(grain_rec_types[init_grain_indices[neighbours1S_8 [cell_index]] - 1] - (float)0) +
                        fabs(grain_rec_types[init_grain_indices[neighbours1S_9 [cell_index]] - 1] - (float)0) +
                        fabs(grain_rec_types[init_grain_indices[neighbours1S_10[cell_index]] - 1] - (float)0) +
                        fabs(grain_rec_types[init_grain_indices[neighbours1S_11[cell_index]] - 1] - (float)0) - (float)100.5)*(float)signbit((float)1.0*new_grain_embryos[cell_index] - (float)0.5);

    // Probability of generation of twinning grain at new grain boundary in current cell
    float aver_tempr_twinning = high_tempr_twinning[old_grain_index] + (float)1.0; // (float)0.5*(low_tempr_twinning[old_grain_index] + high_tempr_twinning[old_grain_index]);

    prob_twinning[cell_index] = max_prob_twinning[old_grain_index]*(float)signbit(fabs(en_types[cell_index] - (float)1) - (float)0.5)*(float)signbit(fabs(old_grain_rec_type - (float)0) - (float)0.5)*
        (float)signbit(low_tempr_twinning[old_grain_index] - temperatures[cell_index])*(float)signbit(temperatures[cell_index] - high_tempr_twinning[old_grain_index])*
       ((float)signbit(temperatures[cell_index] - aver_tempr_twinning)*((float)0.4 + (float)0.6*(temperatures[cell_index] - low_tempr_twinning[old_grain_index])/(aver_tempr_twinning - low_tempr_twinning[old_grain_index])) + 
        (float)signbit(aver_tempr_twinning - temperatures[cell_index])*(high_tempr_twinning[old_grain_index] - temperatures[cell_index])/(high_tempr_twinning[old_grain_index] - aver_tempr_twinning))*
        (float)signbit(fabs(grain_rec_types[init_grain_indices[neighbours1S_0 [cell_index]] - 1] - (float)1)*
                       fabs(grain_rec_types[init_grain_indices[neighbours1S_1 [cell_index]] - 1] - (float)1)*
                       fabs(grain_rec_types[init_grain_indices[neighbours1S_2 [cell_index]] - 1] - (float)1)*
                       fabs(grain_rec_types[init_grain_indices[neighbours1S_3 [cell_index]] - 1] - (float)1)*
                       fabs(grain_rec_types[init_grain_indices[neighbours1S_4 [cell_index]] - 1] - (float)1)*
                       fabs(grain_rec_types[init_grain_indices[neighbours1S_5 [cell_index]] - 1] - (float)1)*
                       fabs(grain_rec_types[init_grain_indices[neighbours1S_6 [cell_index]] - 1] - (float)1)*
                       fabs(grain_rec_types[init_grain_indices[neighbours1S_7 [cell_index]] - 1] - (float)1)*
                       fabs(grain_rec_types[init_grain_indices[neighbours1S_8 [cell_index]] - 1] - (float)1)*
                       fabs(grain_rec_types[init_grain_indices[neighbours1S_9 [cell_index]] - 1] - (float)1)*
                       fabs(grain_rec_types[init_grain_indices[neighbours1S_10[cell_index]] - 1] - (float)1)*
                       fabs(grain_rec_types[init_grain_indices[neighbours1S_11[cell_index]] - 1] - (float)1) - (float)0.5)*signbit((float)twin_grain_embryos[cell_index] - (float)0.5);

    __syncthreads();

    // Presence of new grain embryo in current cell: 0 - embryo is absent, 1 - embryo is here
    new_grain_embryos[cell_index]  = (char)signbit(random[cell_index] - prob_new_grain[cell_index]);

    // Presence of twin grain embryo in current cell: 0 - embryo is absent, 1 - embryo is here
    char twin_grain_embryo = (char)signbit(random[cell_index] - prob_twinning[cell_index]); // *(char)sighbit(new_grain_embryos[cell_index] - (float)0.5);

    root_grain_indices[cell_index] = twin_grain_embryo*
           ((float)signbit(fabs(grain_rec_types[init_grain_indices[neighbours1S_0 [cell_index]] - 1] - (float)1) - (float)0.5)*init_grain_indices[neighbours1S_0 [cell_index]] + 
            (float)signbit(fabs(grain_rec_types[init_grain_indices[neighbours1S_1 [cell_index]] - 1] - (float)1) - (float)0.5)*init_grain_indices[neighbours1S_1 [cell_index]] + 
            (float)signbit(fabs(grain_rec_types[init_grain_indices[neighbours1S_2 [cell_index]] - 1] - (float)1) - (float)0.5)*init_grain_indices[neighbours1S_2 [cell_index]] + 
            (float)signbit(fabs(grain_rec_types[init_grain_indices[neighbours1S_3 [cell_index]] - 1] - (float)1) - (float)0.5)*init_grain_indices[neighbours1S_3 [cell_index]] + 
            (float)signbit(fabs(grain_rec_types[init_grain_indices[neighbours1S_4 [cell_index]] - 1] - (float)1) - (float)0.5)*init_grain_indices[neighbours1S_4 [cell_index]] + 
            (float)signbit(fabs(grain_rec_types[init_grain_indices[neighbours1S_5 [cell_index]] - 1] - (float)1) - (float)0.5)*init_grain_indices[neighbours1S_5 [cell_index]] + 
            (float)signbit(fabs(grain_rec_types[init_grain_indices[neighbours1S_6 [cell_index]] - 1] - (float)1) - (float)0.5)*init_grain_indices[neighbours1S_6 [cell_index]] + 
            (float)signbit(fabs(grain_rec_types[init_grain_indices[neighbours1S_7 [cell_index]] - 1] - (float)1) - (float)0.5)*init_grain_indices[neighbours1S_7 [cell_index]] + 
            (float)signbit(fabs(grain_rec_types[init_grain_indices[neighbours1S_8 [cell_index]] - 1] - (float)1) - (float)0.5)*init_grain_indices[neighbours1S_8 [cell_index]] + 
            (float)signbit(fabs(grain_rec_types[init_grain_indices[neighbours1S_9 [cell_index]] - 1] - (float)1) - (float)0.5)*init_grain_indices[neighbours1S_9 [cell_index]] + 
            (float)signbit(fabs(grain_rec_types[init_grain_indices[neighbours1S_10[cell_index]] - 1] - (float)1) - (float)0.5)*init_grain_indices[neighbours1S_10[cell_index]] + 
            (float)signbit(fabs(grain_rec_types[init_grain_indices[neighbours1S_11[cell_index]] - 1] - (float)1) - (float)0.5)*init_grain_indices[neighbours1S_11[cell_index]])/ 
           ((float)signbit(fabs(grain_rec_types[init_grain_indices[neighbours1S_0 [cell_index]] - 1] - (float)1) - (float)0.5) + 
            (float)signbit(fabs(grain_rec_types[init_grain_indices[neighbours1S_1 [cell_index]] - 1] - (float)1) - (float)0.5) + 
            (float)signbit(fabs(grain_rec_types[init_grain_indices[neighbours1S_2 [cell_index]] - 1] - (float)1) - (float)0.5) + 
            (float)signbit(fabs(grain_rec_types[init_grain_indices[neighbours1S_3 [cell_index]] - 1] - (float)1) - (float)0.5) + 
            (float)signbit(fabs(grain_rec_types[init_grain_indices[neighbours1S_4 [cell_index]] - 1] - (float)1) - (float)0.5) + 
            (float)signbit(fabs(grain_rec_types[init_grain_indices[neighbours1S_5 [cell_index]] - 1] - (float)1) - (float)0.5) + 
            (float)signbit(fabs(grain_rec_types[init_grain_indices[neighbours1S_6 [cell_index]] - 1] - (float)1) - (float)0.5) + 
            (float)signbit(fabs(grain_rec_types[init_grain_indices[neighbours1S_7 [cell_index]] - 1] - (float)1) - (float)0.5) + 
            (float)signbit(fabs(grain_rec_types[init_grain_indices[neighbours1S_8 [cell_index]] - 1] - (float)1) - (float)0.5) + 
            (float)signbit(fabs(grain_rec_types[init_grain_indices[neighbours1S_9 [cell_index]] - 1] - (float)1) - (float)0.5) + 
            (float)signbit(fabs(grain_rec_types[init_grain_indices[neighbours1S_10[cell_index]] - 1] - (float)1) - (float)0.5) + 
            (float)signbit(fabs(grain_rec_types[init_grain_indices[neighbours1S_11[cell_index]] - 1] - (float)1) - (float)0.5)); 
    
    twin_grain_embryos[cell_index] = twin_grain_embryo; // (char)signbit(fabs(grain_rec_types[root_grain_indices[cell_index] - 1] - (float)1) - (float)0.5);
}